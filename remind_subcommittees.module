<?php

/**
 * Define the period for when to check to send an email
 */
define('REMIND_SUBCOMMITTEES_CHECK_PERIOD', (60*60*24)); // Daily
define('REMIND_SUBCOMMITTEE_COUNCIL_ADDRESS', 'council@linux.org.au'); // Address to send from and notices to.


/**
 * Implementation of hook_mail()
 *
 * Set the content of the reminder emails
 */
function remind_subcommittees_mail($key, &$message, $subcommittee) {
    $CC_to = REMIND_SUBCOMMITTEE_COUNCIL_ADDRESS;
    $from_address = REMIND_SUBCOMMITTEE_COUNCIL_ADDRESS;

    // Fix up the period
    $period = $subcommittee->field_reporting_period[0]['value'];
    $period = ( $period == 'Annually' ) ? 'Annual' : $period;

    $next_report_date = date('Y-m-d', strtotime($subcommittee->field_next_report_date[0]['value']));

    $message['headers']['CC'] = $CC_to;
    $message['from'] = $from_address;
    switch($key) {
        case 'remind':
            $message['subject'] = t('Subcommittee report for !subcommittee is due.', array('!subcommittee' => $subcommittee->title));
$message['body'][] = t("Hi there,

Your !period report for the !subcommittee subcommittee is due on the !duedate.

Please go to !reporturl and enter your report. You may enter it directly into the form, attach a copy or link to one hosted elsewhere. 

Your report only needs to provide a quick update of how things are progressing for your subcommittee.
This can be as short as some simple dot points to let the council know that things are going smoothly.
Please follow the instructions on the submission URL.

Linux Australia really appreciates your ongoing efforts and commitment and help in your roles.

Thanks,
The Linux Australia Council
", array('!period' => $period, '!subcommittee' => $subcommittee->title ,'!reporturl' => url('node/add/report', array('absolute' => true)), '!duedate' => $next_report_date));
        break;
        case 'overdue':
            $message['subject'] = t('Subcommittee report for !subcommittee is overdue.', array('!subcommittee' => $subcommittee->title));
$message['body'][] = t("Hi there,

Your !period report for the !subcommittee subcommittee is now overdue. The report was due on the !duedate.

Please go to !reporturl and enter your report. You may enter it directly into the form, attach a copy or link to one hosted elsewhere.

Your report only needs to provide a quick update of how things are progressing for your subcommittee.
This can be as short as some simple dot points to let the council know that things are going smoothly.
Please follow the instructions on the submission URL.

Linux Australia really appreciates your ongoing efforts and commitment and help in your roles. If you are unable to submit your report for any reasons, please contact council@linux.org.au.

Thanks,
The Linux Australia Council
", array('!period' => $period, '!subcommittee' => $subcommittee->title, '!reporturl' => url('node/add/report', array('absolute' => true)), '!duedate' => $next_report_date));
        break;
        case 'no_contact_address':
            $message['subject'] = t('Subcommittee reminder for !subcommittee could not be sent.', array('!subcommittee' => $subcommittee->title));
$message['body'][] = t("Hi there,

Unfortunately !contact_address is not a valid email address. As such the !subcommittee subcommittee could not be reminded about their report due on !duedate.

Please update the details on the linux.org.au website[0] and then send a reminder manually.

Cheers!

[0] !editurl", array('!subcommittee' => $subcommittee->title, '!editurl' => url('node/' . $subcommittee->nid . '/edit', array('absolute' => true)), '!duedate' => $next_report_date, '!contact_address' => $subcommittee->field_subcommittee_contact[0]['value']));
        break;
    }
}

/**
 * Implementation of hook_cron()
 *
 * Do the work on cron run.
 */
function remind_subcommittees_cron() {
    // Check the last time a check was run
    if ( (time() - variable_get('remind_subcommittees_last_check', 0)) >= REMIND_SUBCOMMITTEES_CHECK_PERIOD ) {
        // Time to run another check
        remind_subcommittees_check();
        variable_set('remind_subcommittees_last_check', time());
    }
}

// Here is the actual work
function remind_subcommittees_check() {
    $time_values = array(
        'Weekly' => 60*60*24*7,
        'Fortnightly' => 60*60*24*14,
        'Monthly' => 60*60*24*30,
        'Bimonthly' => 60*60*24*60,
        'Quarterly' => 60*60*24*91,
        'Half Yearly' => 60*60*24*182,
        'Annually' => 60*60*24*365,
    );

    $query = db_query("SELECT * FROM {node} WHERE type = 'subcommittee'");
    while ( $row = db_fetch_object($query) ) {
        $subcommittee = node_load($row->nid);
        $query2 = db_query("SELECT * FROM {content_type_report}, {node} WHERE content_type_report.field_report_references_nid = %d AND content_type_report.nid = node.nid ORDER BY node.created DESC LIMIT 1", $row->nid);
        $last_report = db_fetch_object($query2);
        $report_period = $time_values[$subcommittee->field_reporting_period[0]['value']];
        $last_reminder = strtotime($subcommittee->field_subcommittee_last_reminder[0]['value']);
        $due_time = strtotime($subcommittee->field_next_report_date[0]['value']);
        if ( $subcommittee->field_subcommittee_status[0]['value'] == 'Active subcommittee' ) {
            if ( $last_report->created >= $last_reminder ) {
                // report already submitted... Automatically update the due date of the next one
                $subcommittee->field_next_report_date[0]['value'] = date('Y-m-d', $due_time + $report_period) . 'T00:00:00';
                node_save($subcommittee);
            }
            else {
                if ( ($due_time - time()) <= (60*60*24*7) ) {
                    // within 7 days of due
                    if ( ($due_time - $last_reminder) >= (60*60*24*7) ) {
                        // haven't already been reminded, so send one
                        remind_subcommittees_send_email($subcommittee);
                    }
                    else if ( time() >= $due_time ) {
                        if ( (time() - $last_reminder) > (60*60*24*3) ) {
                            remind_subcommittees_overdue($subcommittee); // send a reminder every 3 days
                        }
                    }
                }
            }
        }
    }
}

function remind_subcommittees_overdue($subcommittee) {
    remind_subcommittees_send_email($subcommittee, 'overdue');
}

// Prepare email for sending
function remind_subcommittees_send_email($subcommittee, $key = 'remind') {
    $subcommittee->field_subcommittee_last_reminder[0]['value'] = date('Y-m-d', time()) . 'T00:00:00';
    node_save($subcommittee);
    $alert_to = $subcommittee->field_subcommittee_contact[0]['value'];
    $from_adddress = REMIND_SUBCOMMITTEE_COUNCIL_ADDRESS;

    if ( valid_email_address($alert_to) ) {
        // Send email
        drupal_mail('remind_subcommittees', $key, $alert_to, user_preferred_language($account), $subcommittee, $from_address);
        // Create a log re mail
        watchdog('remind_subcommittees', 'remind_subcommittees has sent an "@key" notice to @subcommittee', array('@key' => $key, '@subcommittee' => $subcommittee->title), WATCHDOG_INFO);
    }
    else {
        drupal_mail('remind_subcommittees', 'no_contact_address', REMIND_SUBCOMMITTEE_COUNCIL_ADDRESS, user_preferred_language($account), $subcommittee, $from_address);
        watchdog('remind_subcommittees', "remind_subcommittees couldn't email @subcommittee because they don't have a valid address.", array('@subcommittee' => $subcommittee->title), WATCHDOG_INFO);
    }
}

?>
